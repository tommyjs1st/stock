    
    def perform_risk_check(self, symbol: str, daily_analysis: Dict, timing_analysis: Dict, 
                          current_price: float) -> Dict:
        """
        종합적인 리스크 체크
        """
        # 1. 시장 상황 체크
        market_risk = self.check_market_conditions()
        
        # 2. 개별 종목 리스크
        stock_risk = self.check_individual_stock_risk(symbol, current_price)
        
        # 3. 포트폴리오 리스크
        portfolio_risk = self.check_portfolio_risk()
        
        # 4. 타이밍 리스크
        timing_risk = self.check_timing_risk(timing_analysis)
        
        risks = []
        
        if market_risk['risk_level'] > 3:
            risks.append(f"시장리스크: {market_risk['reason']}")
        
        if stock_risk['risk_level'] > 3:
            risks.append(f"종목리스크: {stock_risk['reason']}")
            
        if portfolio_risk['risk_level'] > 3:
            risks.append(f"포트폴리오리스크: {portfolio_risk['reason']}")
            
        if timing_risk['risk_level'] > 3:
            risks.append(f"타이밍리스크: {timing_risk['reason']}")
        
        approved = len(risks) == 0
        
        return {
            'approved': approved,
            'reason': '; '.join(risks) if risks else '리스크 체크 통과',
            'risk_count': len(risks)
        }
    
    
    def check_individual_stock_risk(self, symbol: str, current_price: float) -> Dict:
        """
        개별 종목 리스크 체크
        """
        risk_level = 0
        reason = ""
        
        try:
            # 최근 가격 변동성 체크
            df = self.api_client.get_daily_data(symbol, days=30)
            if not df.empty:
                # 30일 최대 일일 변동폭
                daily_changes = df['stck_prpr'].pct_change().abs()
                max_daily_change = daily_changes.max()
                avg_daily_change = daily_changes.mean()
                
                if max_daily_change > 0.15:  # 15% 이상 일일 변동
                    risk_level += 2
                    reason += f"고변동성(최대{max_daily_change:.1%}); "
                    
                if avg_daily_change > 0.05:  # 평균 5% 이상 변동
                    risk_level += 1
                    reason += f"높은평균변동성({avg_daily_change:.1%}); "
                
                # 연속 상승/하락 체크
                recent_changes = df['stck_prpr'].pct_change().tail(5)
                consecutive_up = sum(1 for x in recent_changes if x > 0.03)  # 3% 이상 상승
                
                if consecutive_up >= 4:  # 5일 중 4일 이상 3%+ 상승
                    risk_level += 2
                    reason += "연속급등위험; "
            
            # 현재가 vs 최근 고점
            if len(df) >= 20:
                recent_high = df['stck_prpr'].tail(20).max()
                if current_price > recent_high * 0.98:  # 최근 고점 98% 이상
                    risk_level += 1
                    reason += "고점근처; "
        
        except Exception as e:
            risk_level = 1
            reason = f"데이터조회실패: {e}"
        
        return {
            'risk_level': risk_level,
            'reason': reason.rstrip('; ') or '정상'
        }
    
    
    def check_market_conditions(self) -> Dict:
        """
        시장 상황 체크 - KOSPI/KOSDAQ 급락 시 매수 금지
        """
        risk_level = 0
        reason = ""
        
        try:
            # KOSPI 체크
            kospi_data = self.api_client.get_daily_data('000001', days=5)  # KOSPI 지수
            if not kospi_data.empty:
                kospi_change = kospi_data['stck_prpr'].pct_change().iloc[-1]
                
                if kospi_change < -0.03:  # 3% 이상 하락
                    risk_level += 2
                    reason += f"KOSPI급락({kospi_change:.1%}); "
                elif kospi_change < -0.015:  # 1.5% 이상 하락
                    risk_level += 1
                    reason += f"KOSPI하락({kospi_change:.1%}); "
            
            # 추가로 VIX나 다른 공포지수가 있다면 체크
            
        except Exception:
            risk_level = 0
            reason = "시장데이터없음"
        
        return {
            'risk_level': risk_level,
            'reason': reason.rstrip('; ') or '시장상황양호'
        }
    
    
    def calculate_volatility(self, symbol: str) -> float:
        """
        종목별 변동성 계산 (20일 기준)
        """
        try:
            df = self.api_client.get_daily_data(symbol, days=30)
            if df.empty or len(df) < 20:
                return 0.04  # 기본값 4%
            
            # 20일 일간 수익률의 표준편차
            daily_returns = df['stck_prpr'].pct_change().dropna()
            volatility = daily_returns.tail(20).std()
            
            return volatility if not pd.isna(volatility) else 0.04
            
        except Exception:
            return 0.04
    
    
    def notify_improved_trade(self, symbol: str, action: str, daily_analysis: Dict, 
                             timing_analysis: Dict, quantity: int, price: float):
        """
        개선된 매매 알림
        """
        if not self.notifier:
            return
        
        stock_name = self.get_stock_name(symbol)
        action_emoji = "🛒" if action == "BUY" else "💸"
        
        title = f"{action_emoji} 개선된 하이브리드 {action}!"
        
        # 위험도 표시
        price_position = timing_analysis.get('price_position', 0.5)
        risk_level = "🟢 저위험" if price_position <= 0.4 else "🟡 중위험" if price_position <= 0.7 else "🔴 고위험"
        
        message = f"""
    종목: {stock_name}({symbol})
    수량: {quantity}주 @ {price:,}원
    총액: {quantity * price:,}원
    
    📊 분석 결과:
    위험도: {risk_level}
    가격위치: {price_position:.1%} (20일고점 대비)
    
    📅 일봉 분석:
    신호: {daily_analysis['signal']} (강도: {daily_analysis['strength']:.1f})
    근거: {', '.join(daily_analysis.get('reasons', []))}
    
    ⏰ 분봉 타이밍:
    점수: {timing_analysis['timing_score']}/5
    근거: {', '.join(timing_analysis.get('reasons', []))}
    RSI: {timing_analysis.get('minute_rsi', 0):.1f}
    
    시간: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
    """
        
        color = 0x00ff00 if action == "BUY" else 0xff6600
        self.notifier.send_notification(title, message, color)
