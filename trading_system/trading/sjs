def calculate_position_size(self, current_price: float, signal_strength: float, 
                           price_position: float, volatility: float, symbol: str = None) -> int:
    try:
        account_data = self.api_client.get_account_balance()
        if not account_data:
            return 0

        output = account_data.get('output', {})
        available_cash = float(output.get('ord_psbl_cash', 0))
        total_deposit = float(output.get('dnca_tot_amt', 0))
        
        # 1. 계좌 정보 로깅
        if symbol:  # 첫 번째 종목에서만 로깅 (중복 방지)
            self.logger.info("💳 계좌 현황:")
            self.logger.info(f"  총 예수금: {total_deposit:,.0f}원")
            self.logger.info(f"  주문가능: {available_cash:,.0f}원")
            
            if total_deposit > available_cash + 50000:
                pending_settlement = total_deposit - available_cash
                self.logger.warning(f"⚠️ T+2 결제 대기중: 약 {pending_settlement:,.0f}원")
        
        # 2. 안전 마진 적용한 사용가능금액 계산
        safety_margin = 50000
        safe_amount = max(0, available_cash - safety_margin)
        
        if safe_amount < 30000:
            if symbol:
                stock_name = self.get_stock_name(symbol) if self.get_stock_name else symbol
                self.logger.warning(f"⚠️ {stock_name}({symbol}) 안전사용금액 부족: {safe_amount:,.0f}원")
            return 0
        
        # 3. 실제 포지션 크기 계산
        max_investment = safe_amount * 0.5  # 50%만 사용
        quantity = int(max_investment / current_price)
        
        if symbol:
            stock_name = self.get_stock_name(symbol) if self.get_stock_name else symbol
            self.logger.info(f"📊 {stock_name}({symbol}) 안전 포지션:")
            self.logger.info(f"  안전사용액: {safe_amount:,.0f}원")
            self.logger.info(f"  최대투자: {max_investment:,.0f}원 → {quantity}주")
        
        return max(quantity, 0)
        
    except Exception as e:
        self.logger.error(f"포지션 계산 오류: {e}")
        return 0
