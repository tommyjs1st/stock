    
    def process_sell_for_symbol(self, symbol: str, position: dict):
        """개선된 개별 종목 매도 처리 - 적절한 익절 타이밍 추가"""
        try:
            if symbol not in self.all_positions:
                return
                
            quantity = position['quantity']
            profit_loss_pct = position['profit_loss']
            profit_loss_decimal = profit_loss_pct / 100
            stock_name = self.get_stock_name(symbol)
            current_price = position['current_price']
            
            # 🔥 1순위: 극단적 손실 방지 (-7% 이상 손실시 무조건 손절)
            if profit_loss_decimal <= -0.07:
                self.logger.warning(f"🛑 {stock_name}({symbol}) 극한 손절! ({profit_loss_pct:+.2f}%)")
                self.execute_sell(symbol, quantity, "urgent", "극한손절")
                return
            
            # 🔥 2순위: 단계적 익절 시스템 (기존 20%에서 개선)
            if profit_loss_decimal >= 0.15:  # 15% 이상 익절
                can_sell, sell_reason = self.position_manager.can_sell_symbol(symbol, quantity)
                if can_sell:
                    self.logger.info(f"🎯 {stock_name}({symbol}) 1차 익절! ({profit_loss_pct:+.2f}%)")
                    self.execute_sell(symbol, quantity, "aggressive_limit", "1차익절")
                    return
            elif profit_loss_decimal >= 0.10:  # 10% 이상에서 기술적 확인 후 익절
                daily_analysis = self.hybrid_strategy.analyze_daily_strategy(symbol)
                if daily_analysis['signal'] == 'SELL' and daily_analysis['strength'] >= 2.0:  # 기준 완화
                    can_sell, sell_reason = self.position_manager.can_sell_symbol(symbol, quantity)
                    if can_sell:
                        self.logger.info(f"🎯 {stock_name}({symbol}) 기술적 익절! ({profit_loss_pct:+.2f}%)")
                        self.execute_sell(symbol, quantity, "aggressive_limit", "기술적익절")
                        return
            
            # 🔥 3순위: 지능형 손절 판단 (-3% ~ -7% 구간에서 상승 가능성 검토)
            if -0.07 < profit_loss_decimal <= -0.03:
                recovery_analysis = self.analyze_recovery_potential(symbol, current_price)
                
                if recovery_analysis['should_hold']:
                    self.logger.info(f"💎 {stock_name}({symbol}) 손절 보류: {recovery_analysis['reason']} "
                                   f"(현재: {profit_loss_pct:+.2f}%)")
                    return
                else:
                    self.logger.warning(f"🛑 {stock_name}({symbol}) 지능형 손절: {recovery_analysis['reason']} "
                                      f"({profit_loss_pct:+.2f}%)")
                    self.execute_sell(symbol, quantity, "aggressive_limit", "지능형손절")
                    return
            
            # 🔥 4순위: 급락 감지
            rapid_drop = self.check_rapid_drop(symbol, current_price)
            if rapid_drop['should_sell']:
                recovery_analysis = self.analyze_recovery_potential(symbol, current_price)
                
                if recovery_analysis['strong_recovery_signal']:
                    self.logger.info(f"🔄 {stock_name}({symbol}) 급락이지만 회복 신호로 보유: {recovery_analysis['reason']}")
                    return
                else:
                    self.logger.warning(f"💥 {stock_name}({symbol}) 급락 매도: {rapid_drop['reason']}")
                    self.execute_sell(symbol, quantity, "urgent", rapid_drop['reason'])
                    return
            
            # 🔥 5순위: 일반적 기술적 매도 (기준 완화)
            if symbol in self.symbols:
                daily_analysis = self.hybrid_strategy.analyze_daily_strategy(symbol)
                
                if daily_analysis['signal'] == 'SELL' and daily_analysis['strength'] >= 2.5:  # 3.5 → 2.5로 완화
                    can_sell, sell_reason = self.position_manager.can_sell_symbol(symbol, quantity)
                    
                    if can_sell:
                        self.logger.info(f"📉 {stock_name}({symbol}) 기술적 매도 신호")
                        self.execute_sell(symbol, quantity, "aggressive_limit", "기술적매도")
                        return
            
            # 🆕 6순위: 장기 보유 시 수익 확정 (5일 이상 보유 + 5% 이상 수익)
            if profit_loss_decimal >= 0.05:
                position_summary = self.position_manager.get_position_summary(symbol)
                first_purchase = position_summary.get('first_purchase_time')
                
                if first_purchase:
                    first_time = datetime.fromisoformat(first_purchase)
                    holding_days = (datetime.now() - first_time).total_seconds() / (24 * 3600)
                    
                    if holding_days >= 5:  # 5일 이상 보유
                        can_sell, sell_reason = self.position_manager.can_sell_symbol(symbol, quantity)
                        if can_sell:
                            self.logger.info(f"⏰ {stock_name}({symbol}) 장기보유 익절: {holding_days:.1f}일 보유 ({profit_loss_pct:+.2f}%)")
                            self.execute_sell(symbol, quantity, "aggressive_limit", "장기익절")
                            return
                    
        except Exception as e:
            self.logger.error(f"{symbol} 매도 처리 중 오류: {e}")
    
