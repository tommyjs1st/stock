        function createPerformanceChart(data) {
            console.log('üé® Chart.js Ï∞®Ìä∏ ÏÉùÏÑ± ÏãúÏûë');
            
            const ctx = document.getElementById('performanceChart');
            if (!ctx) {
                console.error('‚ùå performanceChart Ï∫îÎ≤ÑÏä§ ÏöîÏÜåÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§');
                throw new Error('Chart canvas not found');
            }
            
            // Chart.js ÎùºÏù¥Î∏åÎü¨Î¶¨ Î°úÎìú ÌôïÏù∏
            if (typeof Chart === 'undefined') {
                console.error('‚ùå Chart.js ÎùºÏù¥Î∏åÎü¨Î¶¨Í∞Ä Î°úÎìúÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§');
                throw new Error('Chart.js library not loaded');
            }
            
            // Í∏∞Ï°¥ Ï∞®Ìä∏Í∞Ä ÏûàÏúºÎ©¥ ÏÇ≠Ï†ú
            if (performanceChart && typeof performanceChart.destroy === 'function') {
                console.log('üóëÔ∏è Í∏∞Ï°¥ Ï∞®Ìä∏ ÏÇ≠Ï†ú');
                performanceChart.destroy();
                performanceChart = null;
            }
        
            // Îç∞Ïù¥ÌÑ∞ Ï§ÄÎπÑ
            const labels = data.performance.map(item => {
                const date = new Date(item.date);
                return date.toLocaleDateString('ko-KR', { month: 'short', day: 'numeric' });
            });
        
            const assetData = data.performance.map(item => Math.round(item.total_assets || 0));
            const returnData = data.performance.map(item => parseFloat(item.total_return_pct || 0));
        
            console.log('üìä Ï∞®Ìä∏ Îç∞Ïù¥ÌÑ∞ Ï§ÄÎπÑ ÏôÑÎ£å:', {
                labels: labels.length,
                assetData: assetData.length,
                returnData: returnData.length
            });
        
            // Chart.js ÏÑ§Ï†ï
            const config = {
                type: 'line',
                data: {
                    labels: labels,
                    datasets: [{
                        label: 'Ï¥ù ÏûêÏÇ∞',
                        data: assetData,
                        borderColor: '#667eea',
                        backgroundColor: 'rgba(102, 126, 234, 0.1)',
                        borderWidth: 3,
                        fill: true,
                        tension: 0.4,
                        yAxisID: 'y'
                    }, {
                        label: 'ÏàòÏùµÎ•†',
                        data: returnData,
                        borderColor: '#ff6b6b',
                        backgroundColor: 'rgba(255, 107, 107, 0.1)',
                        borderWidth: 2,
                        fill: false,
                        tension: 0.4,
                        yAxisID: 'y1'
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    interaction: {
                        mode: 'index',
                        intersect: false,
                    },
                    scales: {
                        x: {
                            display: true,
                            title: {
                                display: true,
                                text: 'ÎÇ†Ïßú'
                            }
                        },
                        y: {
                            type: 'linear',
                            display: true,
                            position: 'left',
                            title: {
                                display: true,
                                text: 'Ï¥ù ÏûêÏÇ∞ (Ïõê)'
                            },
                            ticks: {
                                callback: function(value) {
                                    return (value / 10000).toFixed(0) + 'ÎßåÏõê';
                                }
                            }
                        },
                        y1: {
                            type: 'linear',
                            display: true,
                            position: 'right',
                            title: {
                                display: true,
                                text: 'ÏàòÏùµÎ•† (%)'
                            },
                            grid: {
                                drawOnChartArea: false,
                            },
                            ticks: {
                                callback: function(value) {
                                    return value.toFixed(1) + '%';
                                }
                            }
                        }
                    },
                    plugins: {
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    let label = context.dataset.label || '';
                                    if (label) {
                                        label += ': ';
                                    }
                                    if (context.parsed.y !== null) {
                                        if (context.datasetIndex === 0) {
                                            label += context.parsed.y.toLocaleString() + 'Ïõê';
                                        } else {
                                            label += context.parsed.y.toFixed(2) + '%';
                                        }
                                    }
                                    return label;
                                }
                            }
                        }
                    }
                }
            };
        
            try {
                performanceChart = new Chart(ctx, config);
                console.log('‚úÖ Chart.js Ï∞®Ìä∏ ÏÉùÏÑ± ÏÑ±Í≥µ');
            } catch (error) {
                console.error('‚ùå Chart.js Ï∞®Ìä∏ ÏÉùÏÑ± Ïã§Ìå®:', error);
                throw error;
            }
        }
